from ..models import *
from .alerts import *
import re, uuid






class Automater():
    """ 
    Build and execute `Automation` logic generated by a user.

    Expects: {
        'automation_id' : str,
        'object_id'     : str
    }

    Use `Automater.run_automation()` to run an `Automation`

    Returns -> None
    """


    def __init__(self, automation_id: str=None, object_id: str=None):
    
        self.automation = Automation.objects.get(id=automation_id)
        self.object_id = object_id
        self.exp_list = []
        self.act_list = []
        self.object = None
        self.use_exp = True




    def get_object(self) -> bool:
        """
        Tries to get the focus object from self.object - if found 
        will set self.object and self.use_exp

        Returns -> bool
        """

        if self.automation.schedule.task_type == 'scan':
            try:
                self.object = Scan.objects.get(id=self.object_id)
            except:
                return False

        elif self.automation.schedule.task_type == 'test':
            try:
                self.object = Test.objects.get(id=self.object_id)
            except:
                return False
        
        elif self.automation.schedule.task_type == 'report':
            try:
                self.object = Report.objects.get(id=self.object_id)
                self.use_exp = False
            except:
                return False

        elif self.automation.schedule.task_type == 'testcase':
            try:
                self.object = Testcase.objects.get(id=self.object_id)
                self.use_exp = True
            except:
                return False

        else:
            return False      
    



    def build_exp_list(self) -> None:
        """ 
        Loop through the automation.expressions
        and rebuilds into self.exp_list

        Returns -> None
        """
                
        # begin iteration
        for expression in self.automation.expressions:

            # set defaults
            exp = None
            data_type = None
            operator = ' == '
            joiner = ''
            data_type = 'self.object.passed'
            value = str(expression['value'])

            # getting data
            if self.object == None:
                
                # get comparison value
                value = str(float(re.search(r'\d+', str(expression['value'])).group()))

                # get operator
                if '>=' in expression['operator']:
                    operator = ' >= '
                else:
                    operator = ' <= '
                
                # get joiner
                if 'and' in expression['joiner']:
                    joiner = ' and '
                elif 'or' in expression['joiner']:
                    joiner = ' or '
                else:
                    joiner = ''


            # high-level test data 
            if 'test_score' in expression['data_type']:
                data_type = 'float(self.object.score)'
            elif 'current_health' in expression['data_type']:
                data_type = '((float(self.object.lighthouse_delta["scores"]["current_average"]) + float(self.object.yellowlab_delta["scores"]["current_average"]))/2)'
            elif 'avg_image_score' in expression['data_type']:
                data_type = 'float(self.object.images_delta["average_score"])'
            elif 'image_scores' in expression['data_type']:
                data_type = '[i["score"] for i in self.object.images_delta["images"]]' 
                exp = f'{joiner}any(i{operator}{value} for i in {data_type})'

            # high-level scan data
            elif 'health' in expression['data_type']:
                data_type = '((float(self.object.lighthouse["scores"]["average"]) + float(self.object.yellowlab["scores"]["globalScore"]))/2)'
            elif 'logs' in expression['data_type']:
                data_type = 'len(self.object.logs)'
            
            # LH test data
            elif 'current_lighthouse_average' in expression['data_type']:
                data_type = 'float(self.object.lighthouse_delta["scores"]["current_average"])'
            elif 'seo_delta' in expression['data_type']:
                data_type = 'float(self.object.lighthouse_delta["scores"]["seo_delta"])'
            elif 'pwa_delta' in expression['data_type']:
                data_type = 'float(self.object.lighthouse_delta["scores"]["pwa_delta"])'
            elif 'crux_delta' in expression['data_type']:
                data_type = 'float(self.object.lighthouse_delta["scores"]["crux_delta"])'
            elif 'best_practices_delta' in expression['data_type']:
                data_type = 'float(self.object.lighthouse_delta["scores"]["best_practices_delta"])'
            elif 'performance_delta' in expression['data_type']:
                data_type = 'float(self.object.lighthouse_delta["scores"]["performance_delta"])'
            elif 'accessibility_delta' in expression['data_type']:
                data_type = 'float(self.object.lighthouse_delta["scores"]["accessibility_delta"])'
            
            # LH scan data
            elif 'lighthouse_average' in expression['data_type']:
                data_type = 'float(self.object.lighthouse["scores"]["average"])'
            elif 'seo' in expression['data_type']:
                data_type = 'float(self.object.lighthouse["scores"]["seo"])'
            elif 'pwa' in expression['data_type']:
                data_type = 'float(self.object.lighthouse["scores"]["pwa"])'
            elif 'crux' in expression['data_type']:
                data_type = 'float(self.object.lighthouse["scores"]["crux"])'
            elif 'best_practices' in expression['data_type']:
                data_type = 'float(self.object.lighthouse["scores"]["best_practices"])'
            elif 'performance' in expression['data_type']:
                data_type = 'float(self.object.lighthouse["scores"]["performance"])'
            elif 'accessibility' in expression['data_type']:
                data_type = 'float(self.object.lighthouse["scores"]["accessibility"])'

            # YL test data
            elif 'current_yellowlab_average' in expression['data_type']:
                data_type = 'float(self.object.yellowlab_delta["scores"]["current_average"])'
            elif 'pageWeight_delta' in expression['data_type']:
                data_type = 'float(self.object.yellowlab_delta["scores"]["pageWeight_delta"])'
            elif 'images_delta' in expression['data_type']:
                data_type = 'float(self.object.yellowlab_delta["scores"]["images_delta"])'
            elif 'domComplexity_delta' in expression['data_type']:
                data_type = 'float(self.object.yellowlab_delta["scores"]["domComplexity_delta"])'
            elif 'javascriptComplexity_delta' in expression['data_type']:
                data_type = 'float(self.object.yellowlab_delta["scores"]["javascriptComplexity_delta"])'
            elif 'badJavascript_delta' in expression['data_type']:
                data_type = 'float(self.object.yellowlab_delta["scores"]["badJavascript_delta"])'
            elif 'jQuery_delta' in expression['data_type']:
                data_type = 'float(self.object.yellowlab_delta["scores"]["jQuery_delta"])'
            elif 'cssComplexity_delta' in expression['data_type']:
                data_type = 'float(self.object.yellowlab_delta["scores"]["cssComplexity_delta"])'
            elif 'badCSS_delta' in expression['data_type']:
                data_type = 'float(self.object.yellowlab_delta["scores"]["badCSS_delta"])'
            elif 'fonts_delta' in expression['data_type']:
                data_type = 'float(self.object.yellowlab_delta["scores"]["fonts_delta"])'
            elif 'serverConfig_delta' in expression['data_type']:
                data_type = 'float(self.object.yellowlab_delta["scores"]["serverConfig_delta"])'
            
            # LH scan data
            elif 'yellowlab_average' in expression['data_type']:
                data_type = 'float(self.object.yellowlab["scores"]["globalScore"])'
            elif 'pageWeight' in expression['data_type']:
                data_type = 'float(self.object.yellowlab["scores"]["pageWeight"])'
            elif 'images' in expression['data_type']:
                data_type = 'float(self.object.yellowlab["scores"]["images"])'
            elif 'domComplexity' in expression['data_type']:
                data_type = 'float(self.object.yellowlab["scores"]["domComplexity"])'
            elif 'javascriptComplexity' in expression['data_type']:
                data_type = 'float(self.object.yellowlab["scores"]["javascriptComplexity"])'
            elif 'badJavascript' in expression['data_type']:
                data_type = 'float(self.object.yellowlab["scores"]["badJavascript"])'
            elif 'jQuery' in expression['data_type']:
                data_type = 'float(self.object.yellowlab["scores"]["jQuery"])'
            elif 'cssComplexity' in expression['data_type']:
                data_type = 'float(self.object.yellowlab["scores"]["cssComplexity"])'
            elif 'badCSS' in expression['data_type']:
                data_type = 'float(self.object.yellowlab["scores"]["badCSS"])'
            elif 'fonts' in expression['data_type']:
                data_type = 'float(self.object.yellowlab["scores"]["fonts"])'
            elif 'serverConfig' in expression['data_type']:
                data_type = 'float(self.object.yellowlab["scores"]["serverConfig"])'
            
            # building exp if not defiined
            if exp is None:
                exp = f'{joiner}{data_type}{operator}{value}'

            # adding exp to exp_list
            self.exp_list.append(exp)

        return None




    def build_act_list(self) -> None:
        """ 
        Loop through the automation.actions
        and rebuilds into self.act_list

        Returns -> None
        """

        # begin iteration
        for action in self.automation.actions:

            if 'slack' in action['action_type']:
                action_type = f"\n  print('sending slack alert')\
                    \n  automation_slack(automation_id='{str(self.automation.id)}', \
                    object_id='{str(self.object_id)}')"
            
            if 'webhook' in action['action_type']:
                action_type = f"\n  print('sending webhook alert')\
                    \n  automation_webhook(request_type='{action['request']}', \
                    request_url='{action['url']}', request_data='{action['json']}', \
                    automation_id='{str(self.automation.id)}', \
                    object_id='{str(self.object_id)}')"
            
            if 'email' in action['action_type']:
                action_type = f"\n  print('sending email alert')\
                    \n  automation_email(email='{action['email']}',\
                    automation_id='{str(self.automation.id)}', \
                    object_id='{str(self.object_id)}')"
                
                if type(self.object).__name__ == 'Report':
                    action_type = f"\n  print('sending report email')\
                        \n  automation_report_email(email='{action['email']}',\
                        automation_id='{str(self.automation.id)}', \
                        object_id='{str(self.object_id)}')"
            
            if 'phone' in action['action_type']:
                action_type = f"\n  print('sending phone alert')\
                    \n  automation_phone(phone_number='{action['phone']}', \
                    automation_id='{str(self.automation.id)}', \
                    object_id='{str(self.object_id)}')"

            # adding action to act_list
            self.act_list.append(act)




    def run_automation(self) -> None:

        # get object data
        proceed = self.get_object()

        # setting default
        exp_string = '1 == 1'

        # if obj was retrieved
        if proceed:

            # build expression if self.use_exp
            if self.use_exp:
                self.build_exp_list()
                exp_string = ' '.join(self.exp_list)

            # build action list
            self.build_act_list()
            act_string = ''.join(self.act_list)            

            # building final exec str
            automation_logic = f'if {exp_string}:{act_string}'
            print(automation_logic)

            # executing automation logic
            exec(automation_logic)

        return None


        




        


        
        