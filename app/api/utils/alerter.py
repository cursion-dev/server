from ..models import *
from .alerts import *
import re, uuid






class Alerter():
    """ 
    Build and execute `Alert` logic generated by a user.

    Expects: {
        'alert_id'   : str,
        'object_id'  : str,
        'expressions' : list
    }

    - Use `Alerter.run_alert()` to run an `Alert`
    - Use `Alerter.get_object()` to set self.object
    - Use `Alerter.build_expressions()` to get self.exp_string

    Returns -> None
    """


    def __init__(
            self, 
            alert_id: str=None, 
            object_id: str=None, 
            expressions: list=[],
            task_type: str=None
        ):
    
        self.alert = Alert.objects.get(id=alert_id) if alert_id else None
        self.expressions = self.alert.expressions if self.alert else expressions
        self.task_type = self.alert.schedule.task_type if self.alert else task_type
        self.object_id = object_id
        self.exp_string = '1 == 1'
        self.act_string = ''
        self.object = None
        self.use_exp = True




    def get_object(self) -> bool:
        """
        Tries to get the focus object from self.object_id - if found 
        will set self.object and self.use_exp

        Returns -> None or object
        """

        if self.task_type == 'scan':
            try:
                self.object = Scan.objects.get(id=self.object_id)
                self.use_exp = True
                return self.object
            except:
                return None

        elif self.task_type == 'test':
            try:
                self.object = Test.objects.get(id=self.object_id)
                self.use_exp = True
                return self.object
            except:
                return None
        
        elif self.task_type == 'report':
            try:
                self.object = Report.objects.get(id=self.object_id)
                self.use_exp = False
                return self.object
            except:
                return None

        elif self.task_type == 'caserun' or self.task_type == 'case':
            try:
                self.object = CaseRun.objects.get(id=self.object_id)
                self.use_exp = True
                return self.object
            except:
                return None

        elif self.task_type == 'flowrun' or self.task_type == 'flow':
            try:
                self.object = FlowRun.objects.get(id=self.object_id)
                self.use_exp = True
                return self.object
            except:
                return None

        else:
            return None      
    



    def build_expressions(self) -> None:
        """ 
        Loop through the self.expressions
        and rebuilds into self.exp_string

        Returns -> self.exp_string
        """
                
        # begin iteration
        for expression in self.expressions:

            # set defaults
            exp = None
            data_type = None
            operator = ' == '
            joiner = ''
            data_type = 'obj.status'
            value = f"str('{str(expression['value'])}')"
            exp_list = []
            non_float_types = ['caserun_status', 'test_status', 'flowrun_status']

            # get comparison value
            if expression['data_type'] not in non_float_types:
                value = str(float(re.search(r'\d+', str(expression['value'])).group()))

            # get operator
            if '>=' in expression['operator']:
                operator = ' >= '
            elif '<=' in expression['operator']:
                operator = ' <= '
            else:
                operator = ' == '
            
            # get joiner
            if 'and' in expression['joiner']:
                joiner = ' and '
            elif 'or' in expression['joiner']:
                joiner = ' or '
            else:
                joiner = ''

            # get data_type translation
            definition = get_definition(expression['data_type'])
            if definition:
                raw_value = definition['value']
                data_type = f'({raw_value} if {raw_value} else 0)'
            
            # building exp if not defined
            if exp is None:
                exp = f'{joiner}{data_type}{operator}{value}'

            # adding exp to exp_list
            exp_list.append(exp)
        
        # build expression string
        self.exp_string = ' '.join(exp_list)
        print(f'Current EXP -> {self.exp_string}')

        # return exp_string
        return self.exp_string




    def build_actions(self) -> None:
        """ 
        Loop through the alert.actions
        and rebuilds into self.act_string

        Returns -> self.act_string
        """

        # defaults
        act_list = []

        # begin iteration
        for action in self.alert.actions:

            if 'slack' in action['action_type']:
                action_type = str(
                    f"\n  print('sending slack alert')" +
                    f"\n  alert_slack(alert_id='{str(self.alert.id)}'," +
                    f" object_id='{str(self.object_id)}')"
                )

            if 'email' in action['action_type']:
                action_type = str(
                    f"\n  print('sending email alert')" +
                    f"\n  alert_email(email='{action['email']}'," +
                    f" alert_id='{str(self.alert.id)}'," +
                    f" object_id='{str(self.object_id)}')"
                )
                
                if type(self.object).__name__ == 'Report':
                    action_type = str(
                        f"\n  print('sending report email')" +
                        f"\n  alert_report_email(email='{action['email']}'," +
                        f" alert_id='{str(self.alert.id)}'," +
                        f" object_id='{str(self.object_id)}')"
                    )
            
            if 'phone' in action['action_type']:
                action_type = str(
                    f"\n  print('sending phone alert')" +
                    f"\n  alert_phone(phone_number='{action['phone']}'," +
                    f" alert_id='{str(self.alert.id)}'," +
                    f" object_id='{str(self.object_id)}')"
                )

            # adding action to act_list
            act_list.append(action_type)
        
        # build string
        self.act_string = ''.join(act_list)
        
        # return formated actions string
        return self.act_string




    def run_alert(self) -> None:

        # get object data
        self.get_object()

        # if obj was retrieved
        if self.object:

            # setting obj for defnitions data
            obj = self.object

            # build expressions
            if self.use_exp:
                self.build_expressions() 

            # build actions
            self.build_actions()

            # building final exec str
            alert_logic = f'if {self.exp_string}:{self.act_string}'

            # executing alert logic
            exec(alert_logic)

        return None


        




        


        
        