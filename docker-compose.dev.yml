services:


  client:
    container_name: cursion-client
    hostname: cursion-client
    image: cursiondev/client
    platform: linux/amd64
    env_file:
      - ./env/.env.client.dev
    expose:
      - "8080"


  server:
    container_name: cursion-server
    hostname: cursion-server
    platform: linux/amd64
    privileged: true
    restart: always
    init: true
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: ["/entrypoint.sh", "server", "remote"]
    expose:
      - "8000"
    env_file:
      - ./env/.env.dev
    volumes:
      - server:/app
      - static_volume:/app/staticfiles
    depends_on:
      - db

  
  db:
    container_name: cursion-db
    hostname: cursion-db
    image: postgres:14-alpine
    platform: linux/amd64
    ports:
      - "5432"
    env_file:
      - ./env/.env.dev
    volumes: 
      - pgdata:/var/lib/postgresql/data


  redis:
    container_name: cursion-redis
    hostname: cursion-redis
    image: redis:alpine
    platform: linux/amd64
    ports:
      - "6379"


  celery:
    container_name: cursion-celery
    hostname: cursion-celery
    platform: linux/amd64
    privileged: true
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: ["/entrypoint.sh", "celery"]
    env_file:
      - ./env/.env.dev
    volumes:
      - celery:/app
    depends_on:
      - redis
      - server
      - db


  beat:
    container_name: cursion-beat
    hostname: cursion-beat
    platform: linux/amd64
    privileged: true
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: ["/entrypoint.sh", "beat"]
    volumes:
      - beat:/app
    env_file:
      - ./env/.env.dev
    depends_on:
      - redis
      - celery
      - server
      - db
      
  
  yellowlab:
    container_name: yellowlab
    hostname: yellowlab
    privileged: true
    restart: always
    image: cursiondev/ylt
    platform: linux/amd64
    ports:
      - "8383:8383"
    depends_on:
      - redis
      - celery 
      - server
      - db


  nginx-proxy:
    container_name: nginx-proxy
    hostname: nginx-proxy
    image: cursiondev/nginx
    restart: always
    platform: linux/amd64
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - static_volume:/app/staticfiles
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - server
      - client
  
  
  nginx-proxy-letsencrypt:
    container_name: nginx-proxy-letsencrypt
    hostname: nginx-proxy-letsencrypt
    image: nginxproxy/acme-companion
    platform: linux/amd64
    env_file:
      - ./env/.env.dev
    volumes:
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - letsencrypt-acme:/etc/acme.sh
    depends_on:
      - nginx-proxy


volumes:
  server:
  static_volume:
  celery:
  beat:
  letsencrypt-acme:
  pgdata:
  certs:
  html:
  vhost: